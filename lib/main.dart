import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart'; // Import ProviderScope
import 'package:simple_yacht/navigation/app_router.dart'; // Assuming myapp is the project name
import 'package:flutter_localizations/flutter_localizations.dart'; // Import for localizations delegates
import 'package:simple_yacht/generated/app_localizations.dart'; // Import generated localizations from new path
import 'package:simple_yacht/state_management/providers/locale_provider.dart'; // Import locale provider
import 'package:simple_yacht/services/presence_service.dart'; // Import PresenceService provider
import 'package:firebase_core/firebase_core.dart'; // Import Firebase Core
import 'services/online_presence_service.dart';
import 'package:firebase_auth/firebase_auth.dart';

// Ensure this file is generated by `flutterfire configure`
// If it's not present, Firebase initialization will fail.
import 'firebase_options.dart';

void main() async { // Make main async
  WidgetsFlutterBinding.ensureInitialized(); // Ensure Flutter bindings are initialized
  await Firebase.initializeApp( // Initialize Firebase
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Anonymous sign-in will be handled by the SplashScreen

  runApp(
    const ProviderScope( // Wrap MyApp with ProviderScope
      child: MyApp(),
    ),
  );
}

class MyApp extends ConsumerStatefulWidget {
  @override
  ConsumerState<MyApp> createState() => _MyAppState();
}

class _MyAppState extends ConsumerState<MyApp> with WidgetsBindingObserver {
  final OnlinePresenceService _presenceService = OnlinePresenceService();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _initializePresence();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _presenceService.goOffline();
    super.dispose();
  }

  // 监听应用生命周期
  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    switch (state) {
      case AppLifecycleState.resumed:
        _presenceService.goOnline();
        break;
      case AppLifecycleState.paused:
      case AppLifecycleState.detached:
        _presenceService.goOffline();
        break;
      default:
        break;
    }
  }

  Future<void> _initializePresence() async {
    // 监听认证状态变化
    FirebaseAuth.instance.authStateChanges().listen((user) {
      if (user != null) {
        _presenceService.goOnline();
      } else {
        _presenceService.goOffline();
      }
    });
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) { // Added WidgetRef
    final currentLocale = ref.watch(localeProvider);
    ref.watch(presenceServiceProvider); // Initialize PresenceService
    final router = AppRouter.createRouter(ref); // Create router instance here

    return MaterialApp.router(
      title: 'Simple Yacht',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      routerConfig: router, // Use the created router instance
      locale: currentLocale, // Set the locale from the provider
      localizationsDelegates: const [
        AppLocalizations.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: const [
        Locale('en', ''), // English, no country code
        Locale('zh', ''), // Chinese, no country code
        Locale('es', ''), // Spanish
        Locale('fr', ''), // French
        Locale('de', ''), // German
        Locale('ja', ''), // Japanese
        Locale('ru', ''), // Russian
        // Add other locales your app supports
      ],
      localeResolutionCallback: (deviceLocale, supportedLocales) {
        // If user has a saved preference, use it.
        if (currentLocale != null) {
          return currentLocale;
        }
        // Otherwise, try to match device locale.
        if (deviceLocale != null) {
          for (var supportedLocale in supportedLocales) {
            if (supportedLocale.languageCode == deviceLocale.languageCode) {
              // We don't check country code here, just language.
              // If you want to be more specific, you can check deviceLocale.countryCode as well.
              return supportedLocale;
            }
          }
        }
        // If device locale is not supported or not available, fallback to English.
        return const Locale('en', '');
      },
    );
  }
}
