// Mocks generated by Mockito 5.4.6 from annotations
// in simple_yacht/test/widgets/game_over_dialog_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_yacht/core_logic/game_state.dart' as _i2;
import 'package:state_notifier/state_notifier.dart' as _i6;

import 'game_over_dialog_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGameState_0 extends _i1.SmartFake implements _i2.GameState {
  _FakeGameState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MockGameStateNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockGameStateNotifier extends _i1.Mock
    implements _i3.MockGameStateNotifier {
  MockMockGameStateNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<int> get diceValues =>
      (super.noSuchMethod(Invocation.getter(#diceValues), returnValue: <int>[])
          as List<int>);

  @override
  List<bool> get heldDice =>
      (super.noSuchMethod(Invocation.getter(#heldDice), returnValue: <bool>[])
          as List<bool>);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  _i4.Stream<_i2.GameState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i4.Stream<_i2.GameState>.empty(),
          )
          as _i4.Stream<_i2.GameState>);

  @override
  _i2.GameState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeGameState_0(this, Invocation.getter(#state)),
          )
          as _i2.GameState);

  @override
  _i2.GameState get debugState =>
      (super.noSuchMethod(
            Invocation.getter(#debugState),
            returnValue: _FakeGameState_0(this, Invocation.getter(#debugState)),
          )
          as _i2.GameState);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  set onError(_i5.ErrorListener? _onError) => super.noSuchMethod(
    Invocation.setter(#onError, _onError),
    returnValueForMissingStub: null,
  );

  @override
  set state(_i2.GameState? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  void rollDice() => super.noSuchMethod(
    Invocation.method(#rollDice, []),
    returnValueForMissingStub: null,
  );

  @override
  void toggleDieHold(int? index) => super.noSuchMethod(
    Invocation.method(#toggleDieHold, [index]),
    returnValueForMissingStub: null,
  );

  @override
  void assignScore(_i2.ScoreCategory? category) => super.noSuchMethod(
    Invocation.method(#assignScore, [category]),
    returnValueForMissingStub: null,
  );

  @override
  void nextTurn() => super.noSuchMethod(
    Invocation.method(#nextTurn, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetGame() => super.noSuchMethod(
    Invocation.method(#resetGame, []),
    returnValueForMissingStub: null,
  );

  @override
  void setToInitialState() => super.noSuchMethod(
    Invocation.method(#setToInitialState, []),
    returnValueForMissingStub: null,
  );

  @override
  bool updateShouldNotify(_i2.GameState? old, _i2.GameState? current) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [old, current]),
            returnValue: false,
          )
          as bool);

  @override
  _i5.RemoveListener addListener(
    _i6.Listener<_i2.GameState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addListener,
              [listener],
              {#fireImmediately: fireImmediately},
            ),
            returnValue: () {},
          )
          as _i5.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
